{"version":3,"sources":["webpack:///./src/templates/component.js"],"names":["IMAGE_TYPES","ComponentTemplate","extractComponentsInfo","component","statementPattern","info","description","_","get","docblock","infoRaw","split","forEach","statement","test","key","match","slice","trim","renderLink","componentInfo","allComponents","this","props","pathContext","components","extendedComponents","chain","extends","replace","value","map","index","isLast","size","text","extendedComponent","find","c","node","displayName","path","extendsLink","className","href","rel","target","to","extendsnotes","renderImage","image","alt","src","style","marginRight","width","border","renderGif","renderImages","images","type","renderImportant","marginBottom","fontWeight","important","importantLink","renderNote","note","renderNotes","notes","renderComponentPage","selectedComponent","componentNode","componentProps","gifs","gif","undefined","imgs","example","modifiers","length","Props","render","navbar","Component","prop","name"],"mappings":"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","file":"component---src-templates-component-js-afb8d4b7a21b5cf383a1.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport Link from 'gatsby-link';\n\nimport './components.scss';\nimport Layout from '../components/layout';\nimport Navbar from '../components/navbar';\n\nconst IMAGE_TYPES = {\n  GIF: 'GIF',\n  PNG: 'PNG'\n};\n\nexport default class ComponentTemplate extends Component {\n  static propTypes = {\n    pathContext: PropTypes.object\n  }\n\n  extractComponentsInfo(component) {\n    const statementPattern = /@\\w*\\:/ //eslint-disable-line\n\n    const info = {\n      description: _.get(component, 'description.text')\n    };\n\n    if (component.docblock) {\n      const infoRaw = _.split(component.docblock, '\\n');\n      _.forEach(infoRaw, statement => {\n        if (statement && statementPattern.test(statement)) {\n          const key = statement.match(statementPattern)[0].slice(1, -1);\n          info[key] = statement.split(statementPattern)[1].trim();\n        }\n      });\n    }\n\n    return info;\n  }\n\n  renderLink(componentInfo) {\n    const {pathContext} = this.props;\n    const allComponents = pathContext.components;\n\n    const extendedComponents = _.chain(componentInfo.extends)\n      .replace(/ /g, '')\n      .split(',')\n      .value();\n\n    return _.map(extendedComponents, (component, index) => {\n      const isLast = index === _.size(extendedComponents) - 1;\n      const text = <b>{`${component}${!isLast ? ', ' : ''}`}</b>;\n      const extendedComponent = _.find(allComponents, c => c.node.displayName === component);\n      const path = !extendedComponent && componentInfo.extendsLink ? componentInfo.extendsLink : `/docs/${component}`;\n\n      return (\n        <span className=\"inline\" key={component}>\n          {!extendedComponent && componentInfo.extendsLink ? (\n            <a href={componentInfo.extendsLink} rel=\"noopener noreferrer\" target=\"_blank\">\n              {text}\n            </a>\n          ) : (\n            <Link to={path}>{text}</Link>\n          )}\n          {componentInfo.extendsnotes}\n          <br/>\n        </span>\n      );\n    });\n  }\n\n  renderImage(image, index) {\n    return <img key={index} alt={''} src={image} style={{marginRight: 20, width: 320, border: '1px solid black'}}/>;\n  }\n\n  renderGif(image, index) {\n    return <img key={index} alt={''} src={image} style={{marginRight: 20, width: 320}}/>;\n  }\n\n  renderImages(images, type) {\n    switch (type) {\n      case IMAGE_TYPES.GIF:\n        return images.map(this.renderGif);\n      default:\n        return images.map(this.renderImage);\n    }\n  }\n\n  renderImportant(componentInfo) {\n    return (\n      <div alt={''} style={{marginBottom: 10}}>\n        <span style={{fontWeight: '700'}}>IMPORTANT: </span> {componentInfo.important} &nbsp;\n        {componentInfo.importantLink && (\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href={componentInfo.importantLink}>\n            here\n          </a>\n        )}\n      </div>\n    );\n  }\n\n  renderNote(note, index) {\n    return (\n      <div key={index} alt={''} style={{marginBottom: 10}}>\n        {note}\n      </div>\n    );\n  }\n\n  renderNotes(notes) {\n    return notes.map(this.renderNote);\n  }\n\n  renderComponentPage() {\n    const {pathContext} = this.props;\n    const selectedComponent = pathContext.componentNode;\n    const componentInfo = this.extractComponentsInfo(selectedComponent);\n    const componentProps = _.get(selectedComponent, 'props');\n    const gifs = componentInfo.gif ? componentInfo.gif.split(',') : undefined;\n    const imgs = componentInfo.image ? componentInfo.image.split(',') : undefined;\n    const notes = componentInfo.notes ? componentInfo.notes.split(';') : undefined;\n\n    return (\n      <div className=\"docs-page\">\n        <div className=\"docs-page__content\">\n          <h1 className=\"title inline\">{selectedComponent.displayName}</h1>\n          {componentInfo.example && (\n            <span className=\"code-example\">\n              (\n              <a className=\"inline\" target=\"_blank\" href={componentInfo.example}>\n                code example\n              </a>\n              )\n            </span>\n          )}\n\n          <h3>{componentInfo.description}</h3>\n          {componentInfo.extends && (\n            <div>\n              Extends: {this.renderLink(componentInfo)}\n              <div>(meaning you can pass the super component's props as well).</div>\n            </div>\n          )}\n          {componentInfo.modifiers && (\n            <div>\n              <p>\n                Supported modifiers: <b>{componentInfo.modifiers}</b>. <br/>\n                Read more about modifiers{' '}\n                <a target=\"_blank\" href={'https://github.com/wix/react-native-ui-lib/wiki/MODIFIERS'}>\n                  {' '}\n                  here\n                </a>\n                .\n              </p>\n            </div>\n          )}\n\n          {componentInfo.notes && (\n            <div>\n              <h4 style={{marginBottom: 10}}>NOTES</h4>\n              {this.renderNotes(notes)}\n            </div>\n          )}\n          {componentInfo.important && <div>{this.renderImportant(componentInfo)}</div>}\n          {componentProps.length > 0 && (\n            <div>\n              <h3>PROPS</h3>\n              <Props props={componentProps}/>\n            </div>\n          )}\n\n          {imgs && (\n            <div className=\"container\">\n              <h3>EXAMPLE</h3>\n              <div className=\"row\">\n                <div className=\"col-sm-12 text-center\">{this.renderImages(imgs, IMAGE_TYPES.PNG)}</div>\n              </div>\n            </div>\n          )}\n\n          {gifs && (\n            <div className=\"container\">\n              <h3>LIVE EXAMPLE</h3>\n              <div className=\"row\">\n                <div className=\"col-sm-12 text-center\">{this.renderImages(gifs, IMAGE_TYPES.GIF)}</div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <Layout {...this.props} navbar={<Navbar/>}>\n        {this.renderComponentPage()}\n      </Layout>\n    );\n  }\n}\n\nconst Props = ({props}) => {\n  return (\n    <div className=\"component-props\">\n      <table>\n        <tbody>\n          <tr>\n            <th>name</th>\n            <th>description</th>\n            <th>type</th>\n            <th>default</th>\n          </tr>\n\n          {_.map(props, (prop, index) => {\n            const description = _.get(prop, 'description.text');\n            if (description) {\n              return (\n                <tr key={index}>\n                  <td>{prop.name}</td>\n                  <td>{description}</td>\n                  <td>{_.get(prop, 'type.name')}</td>\n                  <td>{_.get(prop, 'defaultValue.value')}</td>\n                </tr>\n              );\n            }\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n"],"sourceRoot":""}