{"version":3,"sources":["webpack:///./src/templates/component.js"],"names":["IMAGE_TYPES","ComponentTemplate","extractComponentsInfo","component","splitPattern","info","description","_","get","docblock","infoRaw","split","forEach","statement","match","exec","key","renderLink","componentInfo","allComponents","this","props","pageContext","components","extendedComponents","flow","text","replace","extends","map","index","isLast","size","extendedComponent","find","c","node","displayName","trim","path","extendsLink","className","href","rel","target","to","extendsnotes","renderImage","image","alt","src","style","marginRight","width","border","renderGif","renderImages","images","type","renderImportant","marginBottom","fontWeight","important","importantLink","renderNote","note","renderNotes","notes","renderComponentPage","selectedComponent","componentNode","componentProps","orderBy","prop","name","toLowerCase","gifs","gif","undefined","imgs","example","modifiers","length","Props","render","isIntro","Component"],"mappings":"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","file":"component---src-templates-component-js-d275bb9f96cb22e56fdb.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport Link from 'gatsby-link';\n\nimport './components.scss';\n\nconst IMAGE_TYPES = {\n  GIF: 'GIF',\n  PNG: 'PNG'\n};\n\nexport default class ComponentTemplate extends Component {\n  static propTypes = {\n    pageContext: PropTypes.object\n  };\n\n  extractComponentsInfo(component) {\n    const splitPattern = /([\\s\\S]*?):([\\s\\S]*)/; //eslint-disable-line\n\n    const info = {\n      description: _.get(component, 'description.text')\n    };\n\n    if (component.docblock) {\n      const infoRaw = _.split(component.docblock, '@');\n      _.forEach(infoRaw, statement => {\n        const match = splitPattern.exec(statement);\n        if (statement && match) {\n          const key = match[1];\n          info[key] = match[2];\n        }\n      });\n    }\n\n    return info;\n  }\n\n  renderLink(componentInfo) {\n    const {pageContext} = this.props;\n    const allComponents = pageContext.components;\n\n    const extendedComponents = _.flow(\n      text => _.replace(text, / /g, ''),\n      text => _.split(text, ',')\n    )(componentInfo.extends);\n\n    return _.map(extendedComponents, (component, index) => {\n      const isLast = index === _.size(extendedComponents) - 1;\n      const text = <b>{`${component}${!isLast ? ', ' : ''}`}</b>;\n      const extendedComponent = _.find(\n        allComponents,\n        c => c.node.displayName.trim() === component.trim()\n      );\n      const path =\n        !extendedComponent && componentInfo.extendsLink\n          ? componentInfo.extendsLink\n          : `/docs/${component}`;\n\n      return (\n        <span className=\"inline\" key={component}>\n          {!extendedComponent && componentInfo.extendsLink ? (\n            <a\n              href={componentInfo.extendsLink}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {text}\n            </a>\n          ) : (\n            <Link to={path}>{text}</Link>\n          )}\n          {componentInfo.extendsnotes}\n          <br />\n        </span>\n      );\n    });\n  }\n\n  renderImage(image, index) {\n    return (\n      <img\n        key={index}\n        alt={''}\n        src={image}\n        style={{marginRight: 20, width: 320, border: '1px solid black'}}\n      />\n    );\n  }\n\n  renderGif(image, index) {\n    return (\n      <img\n        key={index}\n        alt={''}\n        src={image}\n        style={{marginRight: 20, width: 320}}\n      />\n    );\n  }\n\n  renderImages(images, type) {\n    switch (type) {\n      case IMAGE_TYPES.GIF:\n        return images.map(this.renderGif);\n      default:\n        return images.map(this.renderImage);\n    }\n  }\n\n  renderImportant(componentInfo) {\n    return (\n      <div alt={''} style={{marginBottom: 10}}>\n        <span style={{fontWeight: '700'}}>IMPORTANT: </span>{' '}\n        {componentInfo.important} &nbsp;\n        {componentInfo.importantLink && (\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href={componentInfo.importantLink}\n          >\n            here\n          </a>\n        )}\n      </div>\n    );\n  }\n\n  renderNote(note, index) {\n    return (\n      <div key={index} alt={''} style={{marginBottom: 10}}>\n        {note}\n      </div>\n    );\n  }\n\n  renderNotes(notes) {\n    return notes.map(this.renderNote);\n  }\n\n  renderComponentPage() {\n    const {pageContext} = this.props;\n    const selectedComponent = pageContext.componentNode;\n    const componentInfo = this.extractComponentsInfo(selectedComponent);\n    const componentProps = _.orderBy(_.get(selectedComponent, 'props'), prop =>\n      prop.name.toLowerCase()\n    );\n    const gifs = componentInfo.gif ? componentInfo.gif.split(',') : undefined;\n    const imgs = componentInfo.image\n      ? componentInfo.image.split(',')\n      : undefined;\n    const notes = componentInfo.notes\n      ? componentInfo.notes.split(';')\n      : undefined;\n\n    return (\n      <div className=\"docs-page\">\n        <div className=\"docs-page__content\">\n          <h1 className=\"title inline\">{selectedComponent.displayName}</h1>\n          {componentInfo.example && (\n            <span className=\"code-example\">\n              (\n              <a\n                className=\"inline\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={componentInfo.example}\n              >\n                code example\n              </a>\n              )\n            </span>\n          )}\n\n          <h3>{componentInfo.description}</h3>\n          {componentInfo.extends && (\n            <div>\n              Extends: {this.renderLink(componentInfo)}\n              <div>\n                (meaning you can pass the super component's props as well).\n              </div>\n            </div>\n          )}\n          {componentInfo.modifiers && (\n            <div>\n              <p>\n                Supported modifiers: <b>{componentInfo.modifiers}</b>. <br />\n                Read more about modifiers{' '}\n                <Link to=\"/foundation/modifiers\">here</Link>.\n              </p>\n            </div>\n          )}\n\n          {componentInfo.notes && (\n            <div>\n              <h4 style={{marginBottom: 10}}>NOTES</h4>\n              {this.renderNotes(notes)}\n            </div>\n          )}\n          {componentInfo.important && (\n            <div>{this.renderImportant(componentInfo)}</div>\n          )}\n          {componentProps.length > 0 && (\n            <div>\n              <h3>PROPS</h3>\n              <Props props={componentProps} />\n            </div>\n          )}\n\n          {imgs && (\n            <div className=\"container\">\n              <h3>EXAMPLE</h3>\n              <div className=\"row\">\n                <div className=\"col-sm-12 text-center\">\n                  {this.renderImages(imgs, IMAGE_TYPES.PNG)}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {gifs && (\n            <div className=\"container\">\n              <h3>LIVE EXAMPLE</h3>\n              <div className=\"row\">\n                <div className=\"col-sm-12 text-center\">\n                  {this.renderImages(gifs, IMAGE_TYPES.GIF)}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const isIntro = !_.get(this.props, 'pageContext.componentNode');\n    return (\n      <div>\n        {isIntro && (\n          <div className=\"docs-page\">\n            <div className=\"docs-page__content\">\n              <div>Select a component from the left sidebar</div>\n            </div>\n          </div>\n        )}\n\n        {!isIntro && this.renderComponentPage()}\n      </div>\n    );\n  }\n}\n\nconst Props = ({props}) => {\n  return (\n    <div className=\"component-props\">\n      <table>\n        <tbody>\n          <tr>\n            <th>name</th>\n            <th>description</th>\n            <th>type</th>\n            <th>default</th>\n          </tr>\n\n          {_.map(props, (prop, index) => {\n            const description = _.get(prop, 'description.text');\n            if (description) {\n              return (\n                <tr key={index}>\n                  <td>{prop.name}</td>\n                  <td>{description}</td>\n                  <td>{_.get(prop, 'type.name')}</td>\n                  <td>{_.get(prop, 'defaultValue.value')}</td>\n                </tr>\n              );\n            }\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n"],"sourceRoot":""}