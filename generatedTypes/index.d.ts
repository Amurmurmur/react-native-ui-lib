import { ActionBar, ActionSheet, Avatar, Badge, Button, Card, Carousel, ConnectionStatusBar, Dialog, Drawer, FloatingButton, FeatureHighlight, Hint, Image, BaseInput, TextArea, TextField, MaskedInput, ListItem, PageControl, PanningProvider, PanGestureView, PanListenerView, PanDismissibleView, PanResponderView, Picker, ProgressBar, Slider, GradientSlider, ColorSliderGroup, Stepper, TabBar, TagsInput, RadioButton, RadioGroup, SharedTransition, StackAggregator, Text, Toast, View, WheelPickerDialog, Assets, BaseComponent, PureBaseComponent, UIComponent, forwardRef, AvatarHelper, Constants, DocsGenerator, LogService, LoaderScreen, Modal, StateScreen, WheelPicker, Incubator } from '../typings';
import ColorPicker from '../typings/components/ColorPicker';
import TouchableOpacity from '../typings/components/TouchableOpacity';
declare const _default: {
    readonly ActionBar: ActionBar;
    readonly ActionSheet: ActionSheet;
    readonly AnimatedImage: any;
    readonly AnimatedScanner: any;
    readonly Avatar: Avatar;
    readonly Badge: Badge;
    readonly Button: Button;
    readonly Card: Card;
    readonly Carousel: Carousel;
    readonly Checkbox: any;
    readonly ColorPalette: any;
    readonly ColorPicker: ColorPicker;
    readonly ColorSwatch: any;
    readonly ConnectionStatusBar: ConnectionStatusBar;
    readonly Dialog: Dialog;
    readonly Drawer: Drawer;
    readonly FloatingButton: FloatingButton;
    readonly FeatureHighlight: FeatureHighlight;
    readonly Hint: Hint;
    readonly Image: Image;
    readonly KeyboardAwareScrollView: any;
    readonly KeyboardAwareListView: any;
    readonly BaseInput: BaseInput<import("../typings").BaseInputProps, {}>;
    readonly TextArea: TextArea;
    readonly TextField: TextField;
    readonly MaskedInput: MaskedInput;
    readonly ListItem: ListItem;
    readonly PageControl: PageControl;
    readonly PanningProvider: PanningProvider;
    readonly PanGestureView: PanGestureView;
    readonly PanListenerView: PanListenerView;
    readonly PanDismissibleView: PanDismissibleView;
    readonly PanResponderView: PanResponderView;
    readonly Picker: Picker;
    readonly DateTimePicker: any;
    readonly ProgressBar: ProgressBar;
    readonly Slider: Slider;
    readonly GradientSlider: GradientSlider;
    readonly ColorSliderGroup: ColorSliderGroup;
    readonly Stepper: Stepper;
    readonly TabController: any;
    readonly TabBar: TabBar;
    readonly TagsInput: TagsInput;
    readonly RadioButton: RadioButton;
    readonly RadioGroup: RadioGroup;
    readonly ScrollBar: any;
    readonly SharedTransition: typeof SharedTransition;
    readonly StackAggregator: StackAggregator;
    readonly Switch: any;
    readonly Text: Text;
    readonly Toast: Toast;
    readonly TouchableOpacity: TouchableOpacity;
    readonly View: View;
    readonly Wizard: any;
    readonly WheelPickerDialog: WheelPickerDialog;
    readonly Assets: typeof Assets;
    readonly BaseComponent: BaseComponent<{}, {}, any>;
    readonly PureBaseComponent: PureBaseComponent<{}, {}, any>;
    readonly SelectableComponent: any;
    readonly UIComponent: UIComponent;
    readonly forwardRef: typeof forwardRef;
    readonly AvatarHelper: typeof AvatarHelper;
    readonly Constants: typeof Constants;
    readonly DocsGenerator: typeof DocsGenerator;
    readonly LogService: typeof LogService;
    readonly LoaderScreen: LoaderScreen;
    readonly Modal: Modal;
    readonly StateScreen: StateScreen;
    readonly HighlighterOverlayView: any;
    readonly SafeAreaSpacerView: any;
    readonly WheelPicker: WheelPicker;
    readonly SafeAreaInsetsManager: any;
    readonly Keyboard: any;
    Colors: import("./style/colors").Colors & {
        dark10: string;
        dark20: string;
        dark30: string;
        dark40: string;
        dark50: string;
        dark60: string;
        dark70: string;
        dark80: string;
        grey10: string;
        grey20: string;
        grey30: string;
        grey40: string;
        grey50: string;
        grey60: string;
        grey70: string;
        grey80: string;
        blue10: string;
        blue20: string;
        blue30: string;
        blue40: string;
        blue50: string;
        blue60: string;
        blue70: string;
        blue80: string;
        cyan10: string;
        cyan20: string;
        cyan30: string;
        cyan40: string;
        cyan50: string;
        cyan60: string;
        cyan70: string;
        cyan80: string;
        green10: string;
        green20: string;
        green30: string;
        green40: string;
        green50: string;
        green60: string;
        green70: string;
        green80: string;
        yellow10: string;
        yellow20: string;
        yellow30: string;
        yellow40: string;
        yellow50: string;
        yellow60: string;
        yellow70: string;
        yellow80: string;
        orange10: string;
        orange20: string;
        orange30: string;
        orange40: string;
        orange50: string;
        orange60: string;
        orange70: string;
        orange80: string;
        red10: string;
        red20: string;
        red30: string;
        red40: string;
        red50: string;
        red60: string;
        red70: string;
        red80: string;
        purple10: string;
        purple20: string;
        purple30: string;
        purple40: string;
        purple50: string;
        purple60: string;
        purple70: string;
        purple80: string;
        violet10: string;
        violet20: string;
        violet30: string;
        violet40: string;
        violet50: string;
        violet60: string;
        violet70: string;
        violet80: string;
        white: string;
        black: string;
    };
    readonly ColorName: any;
    readonly BorderRadiuses: any;
    readonly Shadows: any;
    readonly Spacings: any;
    readonly Components: any;
    readonly ComponentsColors: any;
    readonly ThemeManager: any;
    readonly Typography: import("../typings").TypographyClass & Readonly<Record<import("../typings").TypographyName, import("../typings").TypographyDescription>>;
    readonly AnimatableManager: import("../typings").AnimatableManagerClass;
    readonly Incubator: typeof Incubator;
};
export default _default;
