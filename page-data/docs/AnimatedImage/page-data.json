{"componentChunkName":"component---src-templates-component-js","path":"/docs/AnimatedImage","result":{"pageContext":{"componentNode":{"displayName":"AnimatedImage","docblock":"@description: Image component that fades-in the image with animation once it's loaded\n@extends: Animated.Image\n@gif: https://media.giphy.com/media/l0HU7jj0ivEFyZIA0/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AnimatedImageScreen.js","description":{"text":"@description: Image component that fades-in the image with animation once it's loaded\n@extends: Animated.Image\n@gif: https://media.giphy.com/media/l0HU7jj0ivEFyZIA0/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AnimatedImageScreen.js"},"props":[{"name":"containerStyle","type":{"name":"union"},"description":{"text":"Additional spacing styles for the container"},"defaultValue":null},{"name":"animationDuration","type":{"name":"number"},"description":{"text":"Duration for the fade animation when the image is loaded"},"defaultValue":{"value":"300"}},{"name":"loader","type":{"name":"element"},"description":{"text":"A component to render while the image is loading"},"defaultValue":null}]},"components":[{"node":{"displayName":"Wizard","docblock":"@description: Wizard Component: a wizard presents a series of steps in  prescribed order\nthat the user needs to complete in order to accomplish a goal (e.g. purchase a product).\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WizardScreen.js\n@notes: Use Wizard with nested Wizard.Step(s) to achieve the desired result.","description":{"text":"@description: Wizard Component: a wizard presents a series of steps in  prescribed order\nthat the user needs to complete in order to accomplish a goal (e.g. purchase a product).\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WizardScreen.js\n@notes: Use Wizard with nested Wizard.Step(s) to achieve the desired result."},"props":[{"name":"activeIndex","type":{"name":"number"},"description":{"text":"The active step's index"},"defaultValue":null},{"name":"activeConfig","type":{"name":"shape"},"description":{"text":"The configuration of the active step (see Wizard.Step.propTypes)"},"defaultValue":null},{"name":"onActiveIndexChanged","type":{"name":"func"},"description":{"text":"Callback that is called when the active step is changed (i.e. a step was clicked on).\nThe new activeIndex will be the input of the callback."},"defaultValue":null}]}},{"node":{"displayName":"Wizard.Step","docblock":"@description: WizardStep Component: a wizard presents a series of steps in  prescribed order\nthat the user needs to complete in order to accomplish a goal (e.g. purchase a product).\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WizardScreen.js\n@notes: Use Wizard with nested Wizard.Step(s) to achieve the desired result.","description":{"text":"@description: WizardStep Component: a wizard presents a series of steps in  prescribed order\nthat the user needs to complete in order to accomplish a goal (e.g. purchase a product).\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WizardScreen.js\n@notes: Use Wizard with nested Wizard.Step(s) to achieve the desired result."},"props":[{"name":"state","type":{"name":"enum"},"description":{"text":"The state of the step (Wizard.States.X)"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"The label of the item"},"defaultValue":null},{"name":"labelStyle","type":{"name":"union"},"description":{"text":"Additional styles for the label"},"defaultValue":null},{"name":"connectorStyle","type":{"name":"union"},"description":{"text":"Additional styles for the connector"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"Color of the step index (or of the icon, when provided)"},"defaultValue":null},{"name":"circleColor","type":{"name":"string"},"description":{"text":"Color of the circle"},"defaultValue":null},{"name":"circleSize","type":{"name":"number"},"description":{"text":"The step's circle size (diameter)"},"defaultValue":null},{"name":"circleBackgroundColor","type":{"name":"string"},"description":{"text":"Circle's background color"},"defaultValue":null},{"name":"icon","type":{"name":"union"},"description":{"text":"Icon to replace the (default) index"},"defaultValue":null},{"name":"indexLabelStyle","type":{"name":"union"},"description":{"text":"Additional styles for the index's label (when icon is not provided)"},"defaultValue":null},{"name":"enabled","type":{"name":"bool"},"description":{"text":"Whether the step should be enabled"},"defaultValue":null},{"name":"accessibilityInfo","type":{"name":"string"},"description":{"text":"Extra text to be read in accessibility mode"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"wheelPickerProps","type":{"name":"shape"},"description":{"text":"Pass props for the WheelPicker (Android only)"},"defaultValue":null},{"name":"selectLabelStyle","type":{"name":"custom"},"description":{"text":"select label style"},"defaultValue":null},{"name":"cancelLabelStyle","type":{"name":"custom"},"description":{"text":"cancel label style"},"defaultValue":null},{"name":"items","type":{"name":"array"},"description":{"text":""},"defaultValue":null},{"name":"selectedValue","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"onCancel","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"onSelect","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Toast","docblock":"@description: A toast component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ToastsScreen.js","description":{"text":"@description: A toast component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ToastsScreen.js"},"props":[{"name":"visible","type":{"name":"bool"},"description":{"text":"Whether to show or hide the toast"},"defaultValue":null},{"name":"position","type":{"name":"enum"},"description":{"text":"The position of the toast. 'top' or 'bottom'."},"defaultValue":{"value":"'top'"}},{"name":"zIndex","type":{"name":"number"},"description":{"text":"custom zIndex for toast"},"defaultValue":{"value":"100"}},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"The background color of the toast"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"the toast content color (message, actions labels)"},"defaultValue":null},{"name":"message","type":{"name":"string"},"description":{"text":"the toast message"},"defaultValue":null},{"name":"centerMessage","type":{"name":"bool"},"description":{"text":"should message be centered in the toast"},"defaultValue":null},{"name":"icon","type":{"name":"union"},"description":{"text":"a left icon"},"defaultValue":null},{"name":"action","type":{"name":"shape"},"description":{"text":"a single action for the user"},"defaultValue":null},{"name":"showLoader","type":{"name":"bool"},"description":{"text":"should show a loader (showDismiss must be false)"},"defaultValue":null},{"name":"onDismiss","type":{"name":"func"},"description":{"text":"callback for dismiss action"},"defaultValue":null},{"name":"autoDismiss","type":{"name":"number"},"description":{"text":"number of milliseconds to automatically invoke the onDismiss callback"},"defaultValue":null},{"name":"showDismiss","type":{"name":"bool"},"description":{"text":"show dismiss action (right 'X' button)"},"defaultValue":null},{"name":"onAnimationEnd","type":{"name":"func"},"description":{"text":"callback for end of component animation"},"defaultValue":null},{"name":"renderAttachment","type":{"name":"elementType"},"description":{"text":"render a custom view that will appear permanently above or below a Toast,\ndepends on the Toast's position, and animate with it when the Toast is made visible or dismissed"},"defaultValue":null},{"name":"customLoader","type":{"name":"func"},"description":{"text":"render a custom loader component instead of the default when passing showLoader"},"defaultValue":null}]}},{"node":{"displayName":"TagsInput","docblock":"@description: Tags input component (chips)\n@modifiers: Typography\n@gif: https://camo.githubusercontent.com/9c2671024f60566b980638ea01b517f6fb509d0b/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f336f45686e374a79685431566658746963452f67697068792e676966\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipsInputScreen.js\n@extends: TextField\n@extendsLink: https://github.com/wix/react-native-ui-lib/blob/master/src/components/inputs/TextField.js","description":{"text":"@description: Tags input component (chips)\n@modifiers: Typography\n@gif: https://camo.githubusercontent.com/9c2671024f60566b980638ea01b517f6fb509d0b/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f336f45686e374a79685431566658746963452f67697068792e676966\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipsInputScreen.js\n@extends: TextField\n@extendsLink: https://github.com/wix/react-native-ui-lib/blob/master/src/components/inputs/TextField.js"},"props":[{"name":"tags","type":{"name":"arrayOf"},"description":{"text":"list of tags. can be string boolean or custom object when implementing getLabel"},"defaultValue":null},{"name":"getLabel","type":{"name":"func"},"description":{"text":"callback for extracting the label out of the tag item"},"defaultValue":null},{"name":"renderTag","type":{"name":"elementType"},"description":{"text":"callback for custom rendering tag item"},"defaultValue":null},{"name":"onChangeTags","type":{"name":"func"},"description":{"text":"callback for onChangeTags event"},"defaultValue":null},{"name":"onCreateTag","type":{"name":"func"},"description":{"text":"callback for creating new tag out of input value (good for composing tag object)"},"defaultValue":null},{"name":"onTagPress","type":{"name":"func"},"description":{"text":"callback for when pressing a tag in the following format (tagIndex, markedTagIndex) => {...}"},"defaultValue":null},{"name":"validationErrorMessage","type":{"name":"string"},"description":{"text":"validation message error appears when tag isn't validate"},"defaultValue":null},{"name":"disableTagRemoval","type":{"name":"bool"},"description":{"text":"if true, tags *removal* Ux won't be available"},"defaultValue":null},{"name":"disableTagAdding","type":{"name":"bool"},"description":{"text":"if true, tags *adding* Ux (i.e. by 'submitting' the input text) won't be available"},"defaultValue":null},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"custom styling for the component container"},"defaultValue":null},{"name":"tagStyle","type":{"name":"custom"},"description":{"text":"custom styling for the tag item"},"defaultValue":null},{"name":"inputStyle","type":{"name":"custom"},"description":{"text":"custom styling for the text input"},"defaultValue":null},{"name":"hideUnderline","type":{"name":"bool"},"description":{"text":"should hide input underline"},"defaultValue":null}]}},{"node":{"displayName":"TextArea","docblock":"@description: a wrapper for Text Field component to create enclosed text area\n@modifiers: Typography\n@extends: TextField\n@extendslink: https://github.com/wix/react-native-ui-lib/blob/master/src/components/textField/index.js\n@gif: https://media.giphy.com/media/3oFzmoU8TdfHeYZNZu/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js","description":{"text":"@description: a wrapper for Text Field component to create enclosed text area\n@modifiers: Typography\n@extends: TextField\n@extendslink: https://github.com/wix/react-native-ui-lib/blob/master/src/components/textField/index.js\n@gif: https://media.giphy.com/media/3oFzmoU8TdfHeYZNZu/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js"},"props":[]}},{"node":{"displayName":"TextField","docblock":"@description: A wrapper for TextInput component with extra functionality like floating placeholder and validations (This is an uncontrolled component)\n@modifiers: Typography\n@extends: TextInput\n@extendslink: https://facebook.github.io/react-native/docs/textinput\n@gif: https://media.giphy.com/media/xULW8su8Cs5Z9Fq4PS/giphy.gif, https://media.giphy.com/media/3ohc1dhDcLS9FvWLJu/giphy.gif, https://media.giphy.com/media/oNUSOxnHdMP5ZnKYsh/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/BasicTextFieldScreen.js","description":{"text":"@description: A wrapper for TextInput component with extra functionality like floating placeholder and validations (This is an uncontrolled component)\n@modifiers: Typography\n@extends: TextInput\n@extendslink: https://facebook.github.io/react-native/docs/textinput\n@gif: https://media.giphy.com/media/xULW8su8Cs5Z9Fq4PS/giphy.gif, https://media.giphy.com/media/3ohc1dhDcLS9FvWLJu/giphy.gif, https://media.giphy.com/media/oNUSOxnHdMP5ZnKYsh/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/BasicTextFieldScreen.js"},"props":[{"name":"floatingPlaceholder","type":{"name":"bool"},"description":{"text":"should placeholder have floating behavior"},"defaultValue":null},{"name":"floatingPlaceholderColor","type":{"name":"union"},"description":{"text":"floating placeholder color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue', disabled: 'grey'}"},"defaultValue":null},{"name":"floatingPlaceholderStyle","type":{"name":"union"},"description":{"text":"Custom style for floating placeholder"},"defaultValue":null},{"name":"helperText","type":{"name":"string"},"description":{"text":"This text will appear as a placeholder when the textInput becomes focused, only when passing floatingPlaceholder\nas well (NOT for expandable textInputs)"},"defaultValue":null},{"name":"hideUnderline","type":{"name":"bool"},"description":{"text":"hide text input underline, by default false"},"defaultValue":null},{"name":"underlineColor","type":{"name":"union"},"description":{"text":"underline color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue', disabled: 'grey'}"},"defaultValue":null},{"name":"disabledColor","type":{"name":"string"},"description":{"text":"the color of all text when the input is disabled (if undefined will not apply color)"},"defaultValue":null},{"name":"centered","type":{"name":"bool"},"description":{"text":"should text input be align to center"},"defaultValue":null},{"name":"error","type":{"name":"string"},"description":{"text":"input error message, should be empty if no error exists"},"defaultValue":null},{"name":"enableErrors","type":{"name":"bool"},"description":{"text":"should the input component support error messages"},"defaultValue":{"value":"true"}},{"name":"errorColor","type":{"name":"string"},"description":{"text":"input error message's text color"},"defaultValue":null},{"name":"expandable","type":{"name":"bool"},"description":{"text":"should the input expand to another text area modal"},"defaultValue":null},{"name":"renderExpandableInput","type":{"name":"elementType"},"description":{"text":"Render custom expandable input (requires expandable to be true)"},"defaultValue":null},{"name":"renderExpandable","type":{"name":"elementType"},"description":{"text":"allow custom rendering of expandable content when clicking on the input (useful for pickers)\naccept props and state as params, ex. (props, state) => {...}\nuse toggleExpandableModal(false) method to toggle off the expandable content"},"defaultValue":null},{"name":"onToggleExpandableModal","type":{"name":"func"},"description":{"text":"Callback for the modal toggle. Pass with renderExpandable to control the modal toggle"},"defaultValue":null},{"name":"topBarProps","type":{"name":"shape"},"description":{"text":"The picker modal top bar props"},"defaultValue":null},{"name":"transformer","type":{"name":"func"},"description":{"text":"transform function executed on value and return transformed value"},"defaultValue":null},{"name":"prefix","type":{"name":"string"},"description":{"text":"Pass to render a prefix text as part of the input (doesn't work with floatingPlaceholder)"},"defaultValue":null},{"name":"prefixStyle","type":{"name":"union"},"description":{"text":"The prefix style"},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":"Fixed title that will displayed above the input (note: floatingPlaceholder MUST be 'false')"},"defaultValue":null},{"name":"titleColor","type":{"name":"union"},"description":{"text":"The title's color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue', disabled: 'grey'}"},"defaultValue":null},{"name":"titleStyle","type":{"name":"union"},"description":{"text":"Additional styles for the title (not including 'color')"},"defaultValue":null},{"name":"showCharacterCounter","type":{"name":"bool"},"description":{"text":"should the input display a character counter (only when passing 'maxLength')"},"defaultValue":null},{"name":"floatOnFocus","type":{"name":"bool"},"description":{"text":"should float the placeholder when focused (instead of when typing)"},"defaultValue":null},{"name":"useTopErrors","type":{"name":"bool"},"description":{"text":"should the errors be displayed at the top"},"defaultValue":null},{"name":"rightIconSource","type":{"name":"union"},"description":{"text":"Icon asset source for showing on the right side, appropriate for dropdown icon and such"},"defaultValue":null},{"name":"rightIconStyle","type":{"name":"union"},"description":{"text":"Pass to style the right icon source"},"defaultValue":null},{"name":"rightButtonProps","type":{"name":"shape"},"description":{"text":"Props for the right button {iconSource, onPress, style}"},"defaultValue":null},{"name":"leadingIcon","type":{"name":"shape"},"description":{"text":"Pass to render a leading icon to the TextInput value. Accepts Image props (doesn't work with floatingPlaceholder)"},"defaultValue":null},{"name":"validateOnBlur","type":null,"description":{"text":""},"defaultValue":{"value":"true"}}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"Text to show on the button"},"defaultValue":null},{"name":"styles","type":{"name":"object"},"description":{"text":"Style from the parent component with `button` style, `buttonText` style and `disableText` style"},"defaultValue":null},{"name":"disabled","type":{"name":"bool"},"description":{"text":"Disabled state of the button"},"defaultValue":null},{"name":"onPress","type":{"name":"func"},"description":{"text":"Handler function to receive updates when the value changes"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Stepper","docblock":"@description: Stepper component with increase and decrease buttons\n@gif: https://media.giphy.com/media/3oFzm47bk0v4WV15O8/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/StepperScreen.js","description":{"text":"@description: Stepper component with increase and decrease buttons\n@gif: https://media.giphy.com/media/3oFzm47bk0v4WV15O8/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/StepperScreen.js"},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"Text to show next to the current number"},"defaultValue":null},{"name":"min","type":{"name":"number"},"description":{"text":"Minimum value"},"defaultValue":null},{"name":"max","type":{"name":"number"},"description":{"text":"Maximum value"},"defaultValue":null},{"name":"containerStyle","type":{"name":"object"},"description":{"text":"Additional styles for the top container"},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":"Handler function to receive updates when the value changes"},"defaultValue":null},{"name":"initialValue","type":{"name":"number"},"description":{"text":"the initial value"},"defaultValue":null}]}},{"node":{"displayName":"StackAggregator","docblock":"@description: Stack aggregator component\n@modifiers: margin, padding\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/StackAggregatorScreen.js","description":{"text":"@description: Stack aggregator component\n@modifiers: margin, padding\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/StackAggregatorScreen.js"},"props":[{"name":"collapsed","type":{"name":"bool"},"description":{"text":"The initial state of the stack"},"defaultValue":{"value":"true"}},{"name":"containerStyle","type":{"name":"union"},"description":{"text":"The container style"},"defaultValue":null},{"name":"contentContainerStyle","type":{"name":"union"},"description":{"text":"The content container style"},"defaultValue":null},{"name":"itemBorderRadius","type":{"name":"number"},"description":{"text":"The items border radius"},"defaultValue":{"value":"0"}},{"name":"buttonProps","type":{"name":"object"},"description":{"text":"Props passed to the 'show less' button"},"defaultValue":null},{"name":"onItemPress","type":{"name":"func"},"description":{"text":"A callback for item press"},"defaultValue":null}]}},{"node":{"displayName":"StateScreen","docblock":"@description: Component that shows a full screen for a certain state, like an empty state\n@image: https://user-images.githubusercontent.com/33805983/34672894-f262ab84-f488-11e7-83f0-4ee0f0ac34ba.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/EmptyStateScreen.js","description":{"text":"@description: Component that shows a full screen for a certain state, like an empty state\n@image: https://user-images.githubusercontent.com/33805983/34672894-f262ab84-f488-11e7-83f0-4ee0f0ac34ba.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/EmptyStateScreen.js"},"props":[{"name":"imageSource","type":{"name":"union"},"description":{"text":"The image source that's showing at the top. use an image that was required locally"},"defaultValue":null},{"name":"source","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":"To to show as the title"},"defaultValue":null},{"name":"subtitle","type":{"name":"any"},"description":{"text":"Text to to show as the subtitle"},"defaultValue":null},{"name":"ctaLabel","type":{"name":"string"},"description":{"text":"Text to to show in the \"call to action\" button"},"defaultValue":null},{"name":"onCtaPress","type":{"name":"func"},"description":{"text":"Action handler for \"call to action\" button"},"defaultValue":null},{"name":"testId","type":{"name":"string"},"description":{"text":"Use to identify the container in tests"},"defaultValue":null}]}},{"node":{"displayName":"GradientSlider","docblock":"@description: A Gradient Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.js","description":{"text":"@description: A Gradient Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.js"},"props":[{"name":"color","type":{"name":"string"},"description":{"text":"The gradient color"},"defaultValue":null},{"name":"type","type":{"name":"enum"},"description":{"text":"The gradient type (default, hue, lightness, saturation)"},"defaultValue":{"value":"'default'"}},{"name":"gradientSteps","type":{"name":"number"},"description":{"text":"The gradient steps"},"defaultValue":{"value":"120"}},{"name":"onValueChange","type":{"name":"func"},"description":{"text":"Callback for onValueChange, returns the updated color"},"defaultValue":null}]}},{"node":{"displayName":"ColorSliderGroup","docblock":"@description: A Gradient Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.js","description":{"text":"@description: A Gradient Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.js"},"props":[{"name":"initialColor","type":{"name":"string"},"description":{"text":"The gradient color"},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":"Callback for onValueChange returns the new hex color"},"defaultValue":null},{"name":"containerStyle","type":{"name":"union"},"description":{"text":"Group container style"},"defaultValue":null},{"name":"sliderContainerStyle","type":{"name":"union"},"description":{"text":"Sliders style"},"defaultValue":null},{"name":"showLabels","type":{"name":"bool"},"description":{"text":"Show the sliders labels (defaults are: Hue, Lightness, Saturation)"},"defaultValue":null},{"name":"labels","type":{"name":"object"},"description":{"text":"In case you would like to change the default labels (translations etc.), you can provide\nthis prop with a map to the relevant labels ({hue: ..., lightness: ..., saturation: ...})."},"defaultValue":{"value":"{hue: 'Hue', lightness: 'Lightness', saturation: 'Saturation'}"}},{"name":"labelsStyle","type":{"name":"union"},"description":{"text":"The labels style"},"defaultValue":null}]}},{"node":{"displayName":"Slider","docblock":"@description: A Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.js","description":{"text":"@description: A Slider component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SliderScreen.js"},"props":[{"name":"value","type":{"name":"number"},"description":{"text":"Initial value"},"defaultValue":{"value":"0"}},{"name":"minimumValue","type":{"name":"number"},"description":{"text":"Minimum value"},"defaultValue":{"value":"0"}},{"name":"maximumValue","type":{"name":"number"},"description":{"text":"Maximum value"},"defaultValue":{"value":"1"}},{"name":"step","type":{"name":"number"},"description":{"text":"Step value of the slider. The value should be between 0 and (maximumValue - minimumValue)"},"defaultValue":{"value":"0"}},{"name":"minimumTrackTintColor","type":{"name":"string"},"description":{"text":"The color used for the track from minimum value to current value"},"defaultValue":null},{"name":"maximumTrackTintColor","type":{"name":"string"},"description":{"text":"The track color"},"defaultValue":null},{"name":"renderTrack","type":{"name":"elementType"},"description":{"text":"Custom render instead of rendering the track"},"defaultValue":null},{"name":"thumbTintColor","type":{"name":"string"},"description":{"text":"Thumb color"},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":"Callback for onValueChange"},"defaultValue":null},{"name":"onSeekStart","type":{"name":"func"},"description":{"text":"Callback that notifies about slider seeking is started"},"defaultValue":null},{"name":"onSeekEnd","type":{"name":"func"},"description":{"text":"Callback that notifies about slider seeking is finished"},"defaultValue":null},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"The container style"},"defaultValue":null},{"name":"trackStyle","type":{"name":"custom"},"description":{"text":"The track style"},"defaultValue":null},{"name":"thumbStyle","type":{"name":"custom"},"description":{"text":"The thumb style"},"defaultValue":null},{"name":"activeThumbStyle","type":{"name":"custom"},"description":{"text":"The active (during press) thumb style"},"defaultValue":null},{"name":"disableActiveStyling","type":{"name":"bool"},"description":{"text":"If true the Slider will not change it's style on press"},"defaultValue":null},{"name":"disabled","type":{"name":"bool"},"description":{"text":"If true the Slider will be disabled and will appear in disabled color"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"color","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"SharedArea","docblock":"","description":{"text":""},"props":[{"name":"renderDetails","type":{"name":"elementType"},"description":{"text":"render details screen"},"defaultValue":{"value":"_.noop"}}]}},{"node":{"displayName":"SourceElement","docblock":"","description":{"text":""},"props":[{"name":"data","type":{"name":"object"},"description":{"text":"Data to share between shared element and placeholder"},"defaultValue":null}]}},{"node":{"displayName":"TargetElement","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"ProgressiveImage","docblock":"@description: Image component that loads first a small thumbnail of the images, \n              and fades-in the full-sized image with animation once it's loaded\n@extends: Animated.Image \n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ProgressiveImageScreen.js","description":{"text":"@description: Image component that loads first a small thumbnail of the images, \n              and fades-in the full-sized image with animation once it's loaded\n@extends: Animated.Image \n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ProgressiveImageScreen.js"},"props":[{"name":"thumbnailSource","type":{"name":"object"},"description":{"text":"small thumbnail source to display while the full-size image is loading"},"defaultValue":null}]}},{"node":{"displayName":"ProgressBar","docblock":"@description: Animated progress bar\n@gif:https://media.giphy.com/media/3o752o08oY0oCvOxR6/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ProgressBarScreen.js\n@extends: AnimatedScanner\n@extendsLink: https://wix-private.github.io/wix-react-native-ui-lib/docs/public/AnimatedScanner/","description":{"text":"@description: Animated progress bar\n@gif:https://media.giphy.com/media/3o752o08oY0oCvOxR6/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ProgressBarScreen.js\n@extends: AnimatedScanner\n@extendsLink: https://wix-private.github.io/wix-react-native-ui-lib/docs/public/AnimatedScanner/"},"props":[{"name":"height","type":{"name":"number"},"description":{"text":"height of the progress bar"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"background color of the component"},"defaultValue":{"value":"Colors.dark60"}},{"name":"progressBackgroundColor","type":{"name":"string"},"description":{"text":"the progress background color"},"defaultValue":{"value":"Colors.dark10"}},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"the progress bar container style"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"selectedValue","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"onDone","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"onCancel","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"topBarProps","type":{"name":"object"},"description":{"text":""},"defaultValue":null},{"name":"children","type":{"name":"array"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"selectedValue","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"onDone","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"onCancel","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"children","type":{"name":"array"},"description":{"text":""},"defaultValue":null},{"name":"wheelPickerProps","type":{"name":"shape"},"description":{"text":"Pass props for the WheelPicker (Android only)"},"defaultValue":null},{"name":"selectLabelStyle","type":{"name":"custom"},"description":{"text":"select label style"},"defaultValue":null},{"name":"cancelLabelStyle","type":{"name":"custom"},"description":{"text":"cancel label style"},"defaultValue":null}]}},{"node":{"displayName":"Picker.Item","docblock":"@description: Picker.Item, for configuring the Picker's selectable options\n@extends: TouchableOpacity\n@extendslink: docs/TouchableOpacity\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js","description":{"text":"@description: Picker.Item, for configuring the Picker's selectable options\n@extends: TouchableOpacity\n@extendslink: docs/TouchableOpacity\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js"},"props":[{"name":"value","type":{"name":"union"},"description":{"text":"Item's value"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"Item's label"},"defaultValue":null},{"name":"getItemLabel","type":{"name":"func"},"description":{"text":"Custom function for the item label (e.g (value) => customLabel)"},"defaultValue":null},{"name":"getItemValue","type":{"name":"func"},"description":{"text":"DEPRECATE: Function to return the value out of the item value prop when value is custom shaped."},"defaultValue":null},{"name":"isSelected","type":{"name":"bool"},"description":{"text":"Is the item selected"},"defaultValue":null},{"name":"selectedIcon","type":{"name":"union"},"description":{"text":"Pass to change the selected icon"},"defaultValue":null},{"name":"selectedIconColor","type":{"name":"string"},"description":{"text":"Pass to change the selected icon color"},"defaultValue":null},{"name":"disabled","type":{"name":"bool"},"description":{"text":"Is the item disabled"},"defaultValue":null},{"name":"renderItem","type":{"name":"elementType"},"description":{"text":"Render custom item"},"defaultValue":null},{"name":"onPress","type":{"name":"func"},"description":{"text":"Callback for onPress action"},"defaultValue":null},{"name":"onSelectedLayout","type":{"name":"func"},"description":{"text":"Callback for onLayout event"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"topBarProps","type":{"name":"shape"},"description":{"text":""},"defaultValue":null},{"name":"scrollPosition","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"showSearch","type":{"name":"bool"},"description":{"text":""},"defaultValue":null},{"name":"searchStyle","type":{"name":"shape"},"description":{"text":""},"defaultValue":{"value":"{}"}},{"name":"searchPlaceholder","type":{"name":"string"},"description":{"text":""},"defaultValue":{"value":"'Search...'"}},{"name":"onSearchChange","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"renderCustomSearch","type":{"name":"elementType"},"description":{"text":""},"defaultValue":null},{"name":"listProps","type":{"name":"object"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"Picker","docblock":"@description: Picker Component, support single or multiple selection, blurModel and nativePicker\n@gif: https://media.giphy.com/media/3o751SiuZZiByET2lq/giphy.gif, https://media.giphy.com/media/TgMQnyw5grJIDohzvx/giphy.gif, https://media.giphy.com/media/5hsdmVptBRskZKn787/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js","description":{"text":"@description: Picker Component, support single or multiple selection, blurModel and nativePicker\n@gif: https://media.giphy.com/media/3o751SiuZZiByET2lq/giphy.gif, https://media.giphy.com/media/TgMQnyw5grJIDohzvx/giphy.gif, https://media.giphy.com/media/5hsdmVptBRskZKn787/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PickerScreen.js"},"props":[{"name":"migrate","type":{"name":"bool"},"description":{"text":"Temporary prop required for migration to Picker's new API"},"defaultValue":null},{"name":"value","type":{"name":"union"},"description":{"text":"Picker current value in the shape of {value: ..., label: ...}, for custom shape use 'getItemValue' prop"},"defaultValue":null},{"name":"onChange","type":{"name":"func"},"description":{"text":"Callback for when picker value change"},"defaultValue":null},{"name":"mode","type":{"name":"enum"},"description":{"text":"SINGLE mode or MULTI mode"},"defaultValue":{"value":"'SINGLE'"}},{"name":"enableModalBlur","type":{"name":"bool"},"description":{"text":"Adds blur effect to picker modal (iOS only)"},"defaultValue":null},{"name":"renderPicker","type":{"name":"elementType"},"description":{"text":"Render custom picker - input will be value (see above)\nExample:\nrenderPicker = (selectedItem) => {...}"},"defaultValue":null},{"name":"renderItem","type":{"name":"elementType"},"description":{"text":"Render custom picker item"},"defaultValue":null},{"name":"renderCustomModal","type":{"name":"elementType"},"description":{"text":"Render custom picker modal (e.g ({visible, children, toggleModal}) => {...})"},"defaultValue":null},{"name":"customPickerProps","type":{"name":"object"},"description":{"text":"Custom picker props (when using renderPicker, will apply on the button wrapper)"},"defaultValue":null},{"name":"onPress","type":{"name":"func"},"description":{"text":"Add onPress callback for when pressing the picker"},"defaultValue":null},{"name":"getItemValue","type":{"name":"func"},"description":{"text":"A function that extract the unique value out of the value prop in case value has a custom structure (e.g. {myValue, myLabel})"},"defaultValue":null},{"name":"getItemLabel","type":{"name":"func"},"description":{"text":"A function that extract the label out of the value prop in case value has a custom structure (e.g. {myValue, myLabel})"},"defaultValue":null},{"name":"getLabel","type":{"name":"func"},"description":{"text":"A function that returns the label to show for the selected Picker value"},"defaultValue":null},{"name":"topBarProps","type":{"name":"shape"},"description":{"text":"The picker modal top bar props"},"defaultValue":null},{"name":"showSearch","type":{"name":"bool"},"description":{"text":"Show search input to filter picker items by label"},"defaultValue":null},{"name":"searchStyle","type":{"name":"shape"},"description":{"text":"Style object for the search input (only when passing showSearch)"},"defaultValue":null},{"name":"searchPlaceholder","type":{"name":"string"},"description":{"text":"Placeholder text for the search input (only when passing showSearch)"},"defaultValue":null},{"name":"onSearchChange","type":{"name":"func"},"description":{"text":"callback for picker modal search input text change (only when passing showSearch)"},"defaultValue":null},{"name":"renderCustomSearch","type":{"name":"elementType"},"description":{"text":"Render custom search input (only when passing showSearch)"},"defaultValue":null},{"name":"useNativePicker","type":{"name":"bool"},"description":{"text":"Allow to use the native picker solution (different style for iOS and Android)"},"defaultValue":null},{"name":"renderNativePicker","type":{"name":"elementType"},"description":{"text":"Callback for rendering a custom native picker inside the dialog (relevant to native picker only)"},"defaultValue":null},{"name":"listProps","type":{"name":"object"},"description":{"text":"Pass props to the list component that wraps the picker options (allows to control FlatList behavior)"},"defaultValue":null}]}},{"node":{"displayName":"MaskedInput","docblock":"@description: Mask Input to create custom looking inputs with custom formats\n@gif: https://camo.githubusercontent.com/61eedb65e968845d5eac713dcd21a69691571fb1/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f4b5a5a7446666f486f454b334b2f67697068792e676966\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/MaskedInputScreen.js","description":{"text":"@description: Mask Input to create custom looking inputs with custom formats\n@gif: https://camo.githubusercontent.com/61eedb65e968845d5eac713dcd21a69691571fb1/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f4b5a5a7446666f486f454b334b2f67697068792e676966\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/MaskedInputScreen.js"},"props":[{"name":"renderMaskedText","type":{"name":"elementType"},"description":{"text":"callback for rendering the custom input out of the value returns from the actual input"},"defaultValue":null},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"container style for the masked input container"},"defaultValue":null}]}},{"node":{"displayName":"LoaderScreen","docblock":"@description: Component that shows a full screen with an activity indicator\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/LoadingScreen.js","description":{"text":"@description: Component that shows a full screen with an activity indicator\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/LoadingScreen.js"},"props":[{"name":"loaderColor","type":{"name":"string"},"description":{"text":"Color of the loading indicator"},"defaultValue":null},{"name":"customLoader","type":{"name":"element"},"description":{"text":"Custom loader"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"Color of the loader background (only when passing 'overlay')"},"defaultValue":null},{"name":"message","type":{"name":"string"},"description":{"text":"loader message"},"defaultValue":null},{"name":"messageStyle","type":{"name":"union"},"description":{"text":"message style"},"defaultValue":null},{"name":"overlay","type":{"name":"bool"},"description":{"text":"Show the screen as an absolute overlay"},"defaultValue":null}]}},{"node":{"displayName":"ListItem","docblock":"@description: List item component to render inside a List component\n@extends: TouchableOpacity\n@extendslink: docs/TouchableOpacity\n@gif: https://media.giphy.com/media/l1IBjHowyPcOTWAY8/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BasicListScreen.js","description":{"text":"@description: List item component to render inside a List component\n@extends: TouchableOpacity\n@extendslink: docs/TouchableOpacity\n@gif: https://media.giphy.com/media/l1IBjHowyPcOTWAY8/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BasicListScreen.js"},"props":[{"name":"height","type":{"name":"union"},"description":{"text":"the list item height"},"defaultValue":{"value":"63"}},{"name":"onPress","type":{"name":"func"},"description":{"text":"action for when pressing the item"},"defaultValue":null},{"name":"onLongPress","type":{"name":"func"},"description":{"text":"action for when long pressing the item"},"defaultValue":null},{"name":"containerStyle","type":{"name":"union"},"description":{"text":"Additional styles for the top container"},"defaultValue":null},{"name":"containerElement","type":{"name":"elementType"},"description":{"text":"The container element to wrap the ListItem"},"defaultValue":{"value":"TouchableOpacity"}},{"name":"underlayColor","type":null,"description":{"text":""},"defaultValue":{"value":"Colors.dark70"}}]}},{"node":{"displayName":"ListItem.Part","docblock":"@description: ListItem.Part, a sub ListItem component for layout-ing inside a ListItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BasicListScreen.js","description":{"text":"@description: ListItem.Part, a sub ListItem component for layout-ing inside a ListItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BasicListScreen.js"},"props":[{"name":"left","type":{"name":"bool"},"description":{"text":"this part content will be aligned to left"},"defaultValue":null},{"name":"middle","type":{"name":"bool"},"description":{"text":"this part content will be aligned to spreaded"},"defaultValue":null},{"name":"right","type":{"name":"bool"},"description":{"text":"this part content will be aligned to right"},"defaultValue":null},{"name":"row","type":{"name":"bool"},"description":{"text":"this part content direction will be row (default)"},"defaultValue":null},{"name":"column","type":{"name":"bool"},"description":{"text":"this part content direction will be column"},"defaultValue":null},{"name":"containerStyle","type":{"name":"union"},"description":{"text":"container style"},"defaultValue":null}]}},{"node":{"displayName":"Hint","docblock":"@description: Hint component for displaying a tooltip over wrapped component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/HintsScreen.js\n@notes: You can either wrap a component or pass a specific targetFrame","description":{"text":"@description: Hint component for displaying a tooltip over wrapped component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/HintsScreen.js\n@notes: You can either wrap a component or pass a specific targetFrame"},"props":[{"name":"visible","type":{"name":"bool"},"description":{"text":"Control the visibility of the hint"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The hint background color"},"defaultValue":null},{"name":"message","type":{"name":"union"},"description":{"text":"The hint message"},"defaultValue":null},{"name":"messageStyle","type":{"name":"union"},"description":{"text":"The hint message custom style"},"defaultValue":null},{"name":"icon","type":{"name":"union"},"description":{"text":"Icon to show next to the hint's message"},"defaultValue":null},{"name":"iconStyle","type":{"name":"union"},"description":{"text":"The icon's style"},"defaultValue":null},{"name":"position","type":{"name":"enum"},"description":{"text":"The hint's position"},"defaultValue":{"value":"'bottom'"}},{"name":"targetFrame","type":{"name":"shape"},"description":{"text":"Provide custom target position instead of wrapping a child"},"defaultValue":null},{"name":"useSideTip","type":{"name":"bool"},"description":{"text":"Show side tips instead of the middle tip"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"The hint's border radius"},"defaultValue":null},{"name":"edgeMargins","type":{"name":"number"},"description":{"text":"Hint margins from screen edges"},"defaultValue":null},{"name":"offset","type":{"name":"number"},"description":{"text":"Hint offset from target"},"defaultValue":null},{"name":"onBackgroundPress","type":{"name":"func"},"description":{"text":"Callback for the background press"},"defaultValue":null},{"name":"containerWidth","type":{"name":"number"},"description":{"text":"The hint container width"},"defaultValue":null},{"name":"testID","type":{"name":"string"},"description":{"text":"The hint's test identifier"},"defaultValue":null}]}},{"node":{"displayName":"FeatureHighlight","docblock":"@description: FeatureHighlight component for feature discovery\n@notes: 1) FeatureHighlight component must be a direct child of the root view returned in render().; 2) If the element to be highlighted doesn't have a style attribute add 'style={{opacity: 1}}' so the Android OS can detect it.\n@important: FeatureHighlight uses a native library. You MUST add and link the native library to both iOS and Android projects. For instruction please see\n@importantLink: https://facebook.github.io/react-native/docs/linking-libraries-ios.html\n@extends: HighlighterOverlayView\n@extendslink: docs/HighlighterOverlayView\n@gif: https://media.giphy.com/media/3ohs4D5irZm5GojsDS/giphy.gif, https://media.giphy.com/media/3oxQNaDQckPZI78rWo/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/FeatureHighlightScreen.js","description":{"text":"@description: FeatureHighlight component for feature discovery\n@notes: 1) FeatureHighlight component must be a direct child of the root view returned in render().; 2) If the element to be highlighted doesn't have a style attribute add 'style={{opacity: 1}}' so the Android OS can detect it.\n@important: FeatureHighlight uses a native library. You MUST add and link the native library to both iOS and Android projects. For instruction please see\n@importantLink: https://facebook.github.io/react-native/docs/linking-libraries-ios.html\n@extends: HighlighterOverlayView\n@extendslink: docs/HighlighterOverlayView\n@gif: https://media.giphy.com/media/3ohs4D5irZm5GojsDS/giphy.gif, https://media.giphy.com/media/3oxQNaDQckPZI78rWo/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/FeatureHighlightScreen.js"},"props":[{"name":"visible","type":{"name":"bool"},"description":{"text":"Boolean to determine if to present the feature highlight component"},"defaultValue":null},{"name":"highlightFrame","type":{"name":"shape"},"description":{"text":"Frame of the area to highlight {x, y, width, height}"},"defaultValue":null},{"name":"getTarget","type":{"name":"func"},"description":{"text":"Callback that extract the ref of the element to be highlighted"},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":"Title of the content to be displayed"},"defaultValue":null},{"name":"message","type":{"name":"string"},"description":{"text":"Message to be displayed"},"defaultValue":null},{"name":"titleStyle","type":{"name":"union"},"description":{"text":"Title text style"},"defaultValue":null},{"name":"messageStyle","type":{"name":"union"},"description":{"text":"Message text style"},"defaultValue":null},{"name":"titleNumberOfLines","type":{"name":"number"},"description":{"text":"Title's max number of lines"},"defaultValue":null},{"name":"messageNumberOfLines","type":{"name":"number"},"description":{"text":"Message's max number of lines"},"defaultValue":null},{"name":"confirmButtonProps","type":{"name":"object"},"description":{"text":"Props that will be passed to the dismiss button"},"defaultValue":null},{"name":"onBackgroundPress","type":{"name":"func"},"description":{"text":"Callback for the background press"},"defaultValue":null},{"name":"overlayColor","type":{"name":"string"},"description":{"text":"Color of the content's background (usually includes alpha for transparency)"},"defaultValue":null},{"name":"textColor","type":{"name":"string"},"description":{"text":"Color of the content's text"},"defaultValue":null},{"name":"borderColor","type":{"name":"string"},"description":{"text":"Color of the border around the highlighted element"},"defaultValue":null},{"name":"borderWidth","type":{"name":"number"},"description":{"text":"Width of the border around the highlighted element"},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":"Border radius for the border corners around the highlighted element"},"defaultValue":null},{"name":"minimumRectSize","type":{"name":"shape"},"description":{"text":"The minimum size of the highlighted component (Android API 21+, and only when passing a ref in 'getTarget')"},"defaultValue":{"value":"{width: 56, height: 56}"}},{"name":"innerPadding","type":{"name":"number"},"description":{"text":"The padding of the highlight frame around the highlighted element's frame (only when passing ref in 'getTarget')"},"defaultValue":{"value":"10"}},{"name":"pageControlProps","type":{"name":"shape"},"description":{"text":"PageControl component's props"},"defaultValue":null}]}},{"node":{"displayName":"DateTimePicker","docblock":"@description: Date and Time Picker Component that wraps RNDateTimePicker for date and time modes.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DateTimePickerScreen.js\n@important: DateTimePicker uses a native library. You MUST add and link the native library to both iOS and Android projects.\n@extends: TextField, react-native-community/datetimepicker\n@extendsLink: https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker","description":{"text":"@description: Date and Time Picker Component that wraps RNDateTimePicker for date and time modes.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DateTimePickerScreen.js\n@important: DateTimePicker uses a native library. You MUST add and link the native library to both iOS and Android projects.\n@extends: TextField, react-native-community/datetimepicker\n@extendsLink: https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker"},"props":[{"name":"mode","type":{"name":"enum"},"description":{"text":"The type of picker to display ('date' or 'time')"},"defaultValue":{"value":"'date'"}},{"name":"value","type":{"name":"instanceOf"},"description":{"text":"The initial value to set the picker to. Defaults to device's date / time"},"defaultValue":null},{"name":"onChange","type":{"name":"func"},"description":{"text":"The onChange callback"},"defaultValue":null},{"name":"minimumDate","type":{"name":"instanceOf"},"description":{"text":"The minimum date or time value to use"},"defaultValue":null},{"name":"maximumDate","type":{"name":"instanceOf"},"description":{"text":"The maximum date or time value to use"},"defaultValue":null},{"name":"dateFormat","type":{"name":"string"},"description":{"text":"The date format for the text display"},"defaultValue":null},{"name":"dateFormatter","type":{"name":"func"},"description":{"text":"A callback function to format date"},"defaultValue":null},{"name":"timeFormat","type":{"name":"string"},"description":{"text":"The time format for the text display"},"defaultValue":null},{"name":"timeFormatter","type":{"name":"func"},"description":{"text":"A callback function to format time"},"defaultValue":null},{"name":"locale","type":{"name":"string"},"description":{"text":"Allows changing of the locale of the component (iOS only)"},"defaultValue":null},{"name":"is24Hour","type":{"name":"bool"},"description":{"text":"Allows changing of the time picker to a 24 hour format (Android only)"},"defaultValue":null},{"name":"minuteInterval","type":{"name":"number"},"description":{"text":"The interval at which minutes can be selected. Possible values are: 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30 (iOS only)"},"defaultValue":null},{"name":"timeZoneOffsetInMinutes","type":{"name":"number"},"description":{"text":"Allows changing of the timeZone of the date picker. By default it uses the device's time zone (iOS only)"},"defaultValue":null},{"name":"dialogProps","type":{"name":"object"},"description":{"text":"Props to pass the Dialog component"},"defaultValue":null},{"name":"headerStyle","type":{"name":"union"},"description":{"text":"style to apply to the iOS dialog header"},"defaultValue":null},{"name":"renderInput","type":{"name":"elementType"},"description":{"text":"Render custom input"},"defaultValue":null}]}},{"node":{"displayName":"ConnectionStatusBar","docblock":"@description: Top bar to show a \"no internet\" connection status. Note: Run on real device for best results\n@image: https://user-images.githubusercontent.com/33805983/34683190-f3b1904c-f4a9-11e7-9d46-9a340bd35448.png, https://user-images.githubusercontent.com/33805983/34484206-edc6c6e4-efcb-11e7-88b2-cd394c19dd5e.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ConnectionStatusBarScreen.js","description":{"text":"@description: Top bar to show a \"no internet\" connection status. Note: Run on real device for best results\n@image: https://user-images.githubusercontent.com/33805983/34683190-f3b1904c-f4a9-11e7-9d46-9a340bd35448.png, https://user-images.githubusercontent.com/33805983/34484206-edc6c6e4-efcb-11e7-88b2-cd394c19dd5e.png\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ConnectionStatusBarScreen.js"},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"Text to show as the status"},"defaultValue":{"value":"'No internet. Check your connection.'"}},{"name":"onConnectionChange","type":{"name":"func"},"description":{"text":"Handler to get connection change events propagation"},"defaultValue":null},{"name":"allowDismiss","type":{"name":"bool"},"description":{"text":"Text to show as the status"},"defaultValue":{"value":"false"}},{"name":"useAbsolutePosition","type":{"name":"bool"},"description":{"text":"Use absolute position for the component"},"defaultValue":{"value":"true"}}]}},{"node":{"displayName":"ColorPalette","docblock":"@description: A color palette component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.js\n@notes: This is a screen width component","description":{"text":"@description: A color palette component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.js\n@notes: This is a screen width component"},"props":[{"name":"colors","type":{"name":"arrayOf"},"description":{"text":"Array of colors to render in the palette"},"defaultValue":null},{"name":"containerStyle","type":{"name":"union"},"description":{"text":"Style to pass the palette container"},"defaultValue":null},{"name":"containerWidth","type":{"name":"number"},"description":{"text":"The container margins"},"defaultValue":null},{"name":"usePagination","type":{"name":"bool"},"description":{"text":"Whether to use pagination when number of colors exceeds the number of rows"},"defaultValue":{"value":"true"}},{"name":"loop","type":{"name":"bool"},"description":{"text":"Whether the colors pagination scrolls in a loop"},"defaultValue":{"value":"true"}},{"name":"numberOfRows","type":{"name":"number"},"description":{"text":"The number of color rows from 2 to 5"},"defaultValue":{"value":"3"}},{"name":"swatchStyle","type":{"name":"union"},"description":{"text":"Style to pass all the ColorSwatches in the palette"},"defaultValue":null},{"name":"value","type":{"name":"union"},"description":{"text":"The value of the selected swatch"},"defaultValue":null},{"name":"animatedIndex","type":{"name":"number"},"description":{"text":"The index of the item to animate at first render (default is last)"},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":"Invoked once when value changes by selecting one of the swatches in the palette"},"defaultValue":null}]}},{"node":{"displayName":"ColorPickerDialog","docblock":"@description: A color picker dialog component\n@extends: Dialog\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.js","description":{"text":"@description: A color picker dialog component\n@extends: Dialog\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.js"},"props":[{"name":"initialColor","type":{"name":"string"},"description":{"text":"The initial color to pass the picker dialog"},"defaultValue":{"value":"Colors.dark80"}},{"name":"onSubmit","type":{"name":"func"},"description":{"text":"onSubmit callback for the picker dialog color change"},"defaultValue":null},{"name":"dialogProps","type":{"name":"object"},"description":{"text":"Props to pass the Dialog component // TODO: deprecate 'dialogProps' prop"},"defaultValue":null},{"name":"previewInputStyle","type":{"name":"union"},"description":{"text":"Additional styling for the color preview text."},"defaultValue":null},{"name":"accessibilityLabels","type":{"name":"shape"},"description":{"text":"Accessibility labels as an object of strings, ex. {addButton: 'add custom color using hex code', dismissButton: 'dismiss', doneButton: 'done', input: 'custom hex color code'}"},"defaultValue":null}]}},{"node":{"displayName":"ColorPicker","docblock":"@description: A color picker component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.js\n@notes: This is a screen width component","description":{"text":"@description: A color picker component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.js\n@notes: This is a screen width component"},"props":[{"name":"colors","type":{"name":"arrayOf"},"description":{"text":"Array of colors for the picker's color palette (hex values)"},"defaultValue":null},{"name":"value","type":{"name":"union"},"description":{"text":"The value of the selected swatch // TODO: rename prop 'selectedValue'"},"defaultValue":null},{"name":"animatedIndex","type":{"name":"number"},"description":{"text":"The index of the item to animate at first render (default is last)"},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":"onValueChange callback for the picker's color palette change"},"defaultValue":null},{"name":"accessibilityLabels","type":{"name":"shape"},"description":{"text":"Accessibility labels as an object of strings, ex.\n{\n addButton: 'add custom color using hex code',\n dismissButton: 'dismiss',\n doneButton: 'done',\n input: 'custom hex color code'\n}"},"defaultValue":{"value":"{\n  addButton: 'add custom color using hex code',\n  dismissButton: 'dismiss',\n  doneButton: 'done',\n  input: 'custom hex color code'\n}"}}]}},{"node":{"displayName":"ColorSwatch","docblock":"@description: A color swatch component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.js\n@extends: Animated.View\n@extendsLink: https://facebook.github.io/react-native/docs/animated","description":{"text":"@description: A color swatch component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ColorPickerScreen.js\n@extends: Animated.View\n@extendsLink: https://facebook.github.io/react-native/docs/animated"},"props":[{"name":"value","type":{"name":"union"},"description":{"text":"The identifier value of the ColorSwatch in a ColorSwatch palette. \nMust be different than other ColorSwatches in the same group"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The color of the ColorSwatch"},"defaultValue":null},{"name":"selected","type":{"name":"bool"},"description":{"text":"Is the initial state is selected"},"defaultValue":null},{"name":"animated","type":{"name":"bool"},"description":{"text":"Is first render should be animated"},"defaultValue":null},{"name":"onPress","type":{"name":"func"},"description":{"text":"onPress callback"},"defaultValue":null}]}},{"node":{"displayName":"ChipsInput","docblock":"@description: Tags input component (chips)\n@modifiers: Typography\n@gif: https://camo.githubusercontent.com/9c2671024f60566b980638ea01b517f6fb509d0b/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f336f45686e374a79685431566658746963452f67697068792e676966\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipsInputScreen.js\n@extends: TextField\n@extendsLink: https://github.com/wix/react-native-ui-lib/blob/master/src/components/inputs/TextField.js","description":{"text":"@description: Tags input component (chips)\n@modifiers: Typography\n@gif: https://camo.githubusercontent.com/9c2671024f60566b980638ea01b517f6fb509d0b/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f336f45686e374a79685431566658746963452f67697068792e676966\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ChipsInputScreen.js\n@extends: TextField\n@extendsLink: https://github.com/wix/react-native-ui-lib/blob/master/src/components/inputs/TextField.js"},"props":[{"name":"tags","type":{"name":"arrayOf"},"description":{"text":"list of tags. can be string boolean or custom object when implementing getLabel"},"defaultValue":null},{"name":"getLabel","type":{"name":"func"},"description":{"text":"callback for extracting the label out of the tag item"},"defaultValue":null},{"name":"renderTag","type":{"name":"elementType"},"description":{"text":"callback for custom rendering tag item"},"defaultValue":null},{"name":"onChangeTags","type":{"name":"func"},"description":{"text":"callback for onChangeTags event"},"defaultValue":null},{"name":"onCreateTag","type":{"name":"func"},"description":{"text":"callback for creating new tag out of input value (good for composing tag object)"},"defaultValue":null},{"name":"onTagPress","type":{"name":"func"},"description":{"text":"callback for when pressing a tag in the following format (tagIndex, markedTagIndex) => {...}"},"defaultValue":null},{"name":"validationErrorMessage","type":{"name":"string"},"description":{"text":"validation message error appears when tag isn't validate"},"defaultValue":null},{"name":"disableTagRemoval","type":{"name":"bool"},"description":{"text":"if true, tags *removal* Ux won't be available"},"defaultValue":null},{"name":"disableTagAdding","type":{"name":"bool"},"description":{"text":"if true, tags *adding* Ux (i.e. by 'submitting' the input text) won't be available"},"defaultValue":null},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"custom styling for the component container"},"defaultValue":null},{"name":"tagStyle","type":{"name":"custom"},"description":{"text":"custom styling for the tag item"},"defaultValue":null},{"name":"inputStyle","type":{"name":"custom"},"description":{"text":"custom styling for the text input"},"defaultValue":null},{"name":"hideUnderline","type":{"name":"bool"},"description":{"text":"should hide input underline"},"defaultValue":null}]}},{"node":{"displayName":"AnimatedImage","docblock":"@description: Image component that fades-in the image with animation once it's loaded\n@extends: Animated.Image\n@gif: https://media.giphy.com/media/l0HU7jj0ivEFyZIA0/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AnimatedImageScreen.js","description":{"text":"@description: Image component that fades-in the image with animation once it's loaded\n@extends: Animated.Image\n@gif: https://media.giphy.com/media/l0HU7jj0ivEFyZIA0/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AnimatedImageScreen.js"},"props":[{"name":"containerStyle","type":{"name":"union"},"description":{"text":"Additional spacing styles for the container"},"defaultValue":null},{"name":"animationDuration","type":{"name":"number"},"description":{"text":"Duration for the fade animation when the image is loaded"},"defaultValue":{"value":"300"}},{"name":"loader","type":{"name":"element"},"description":{"text":"A component to render while the image is loading"},"defaultValue":null}]}},{"node":{"displayName":"AnimatedScanner","docblock":"@description: Scanner component for progress indication\n@extends: Animated.View\n@gif: https://media.giphy.com/media/l49JVcxoclUXbryiA/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardScannerScreen.js","description":{"text":"@description: Scanner component for progress indication\n@extends: Animated.View\n@gif: https://media.giphy.com/media/l49JVcxoclUXbryiA/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/CardScannerScreen.js"},"props":[{"name":"progress","type":{"name":"number"},"description":{"text":"animated value between 0 and 100"},"defaultValue":{"value":"0"}},{"name":"duration","type":{"name":"number"},"description":{"text":"Duration of current break (can be change between breaks)"},"defaultValue":{"value":"1000"}},{"name":"opacity","type":{"name":"number"},"description":{"text":"scanner opacity"},"defaultValue":null},{"name":"backgroundColor","type":{"name":"string"},"description":{"text":"scanner background color"},"defaultValue":null},{"name":"onBreakpoint","type":{"name":"func"},"description":{"text":"breakpoint callback - ({progress, isDone}) => {}"},"defaultValue":null},{"name":"hideScannerLine","type":{"name":"bool"},"description":{"text":"should hide the scanner line"},"defaultValue":null},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"the container style"},"defaultValue":null}]}},{"node":{"displayName":"KeyboardAwareFlatList","docblock":"@description: A wrapper component which handles the FlatList insets properly when the keyboard is shown and hides the content, scrolling content above the keybaord.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/KeyboardAwareScrollViewScreen.js","description":{"text":"@description: A wrapper component which handles the FlatList insets properly when the keyboard is shown and hides the content, scrolling content above the keybaord.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/KeyboardAwareScrollViewScreen.js"},"props":[{"name":"getTextInputRefs","type":null,"description":{"text":""},"defaultValue":{"value":"() => {\n  return [];\n}"}}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"onScroll","type":{"name":"func"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"KeyboardAwareScrollView","docblock":"@description: A wrapper component which handles the ScrollView insets properly when the keyboard is shown and hides the content, scrolling content above the keybaord.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/KeyboardAwareScrollViewScreen.js","description":{"text":"@description: A wrapper component which handles the ScrollView insets properly when the keyboard is shown and hides the content, scrolling content above the keybaord.\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/KeyboardAwareScrollViewScreen.js"},"props":[{"name":"getTextInputRefs","type":null,"description":{"text":""},"defaultValue":{"value":"() => {\n  return [];\n}"}}]}},{"node":{"displayName":"ActionSheet","docblock":"@description: Cross platform Action Sheet, with a support for native iOS solution\n@gif: https://media.giphy.com/media/l0HUpXOR6RqB2ct5S/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ActionSheetScreen.js","description":{"text":"@description: Cross platform Action Sheet, with a support for native iOS solution\n@gif: https://media.giphy.com/media/l0HUpXOR6RqB2ct5S/giphy.gif\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ActionSheetScreen.js"},"props":[{"name":"visible","type":{"name":"bool"},"description":{"text":"Whether to show the action sheet or not"},"defaultValue":null},{"name":"title","type":{"name":"string"},"description":{"text":"Title of the action sheet. Note: if both title and message are not passed will not render the title view at all"},"defaultValue":{"value":"undefined"}},{"name":"message","type":{"name":"string"},"description":{"text":"Message of the action sheet"},"defaultValue":{"value":"undefined"}},{"name":"cancelButtonIndex","type":{"name":"number"},"description":{"text":"Index of the option represents the cancel action (to be displayed as the separated bottom bold button)"},"defaultValue":null},{"name":"destructiveButtonIndex","type":{"name":"number"},"description":{"text":"Index of the option represents the destructive action (will display red text. Usually used for 'delete' or\n'abort' actions)"},"defaultValue":null},{"name":"options","type":{"name":"arrayOf"},"description":{"text":"List of options for the action sheet, follows the Button prop types (supply 'label' string and 'onPress'\nfunction)"},"defaultValue":null},{"name":"onDismiss","type":{"name":"func"},"description":{"text":"callback for when dismissing the action sheet, usually used for setting visible prop to false"},"defaultValue":null},{"name":"useNativeIOS","type":{"name":"bool"},"description":{"text":"Should use the native action sheet for iOS"},"defaultValue":null},{"name":"showCancelButton","type":{"name":"bool"},"description":{"text":"When passed (only with useNativeIOS), will display a cancel button at the bottom (overrides cancelButtonIndex)"},"defaultValue":null},{"name":"containerStyle","type":{"name":"custom"},"description":{"text":"Add or override style of the action sheet (wraps the title and actions)"},"defaultValue":null},{"name":"dialogStyle","type":{"name":"custom"},"description":{"text":"Add or override style of the dialog wrapping the action sheet"},"defaultValue":null},{"name":"optionsStyle","type":{"name":"custom"},"description":{"text":"Add or override style of the options list"},"defaultValue":null},{"name":"renderTitle","type":{"name":"elementType"},"description":{"text":"Render custom title"},"defaultValue":null},{"name":"renderAction","type":{"name":"elementType"},"description":{"text":"Render custom action\nNote: you will need to call onOptionPress so the option's onPress will be called"},"defaultValue":null},{"name":"onModalDismissed","type":{"name":"func"},"description":{"text":"Called once the modal has been dissmissed (iOS only, modal only)"},"defaultValue":null},{"name":"useSafeArea","type":{"name":"bool"},"description":{"text":"Whether or not to handle SafeArea"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"IGNORE","docblock":"@description: TabController's TabPage\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js","description":{"text":"@description: TabController's TabPage\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js"},"props":[{"name":"index","type":{"name":"number"},"description":{"text":"The index of the the TabPage"},"defaultValue":null},{"name":"lazy","type":{"name":"bool"},"description":{"text":"Whether this page should be loaded lazily"},"defaultValue":null},{"name":"lazyLoadTime","type":{"name":"number"},"description":{"text":"How long to wait till lazy load complete (good for showing loader screens)"},"defaultValue":{"value":"300"}},{"name":"renderLoading","type":{"name":"elementType"},"description":{"text":"Render a custom loading page when lazy loading"},"defaultValue":{"value":"_.noop"}},{"name":"activeOpacity","type":null,"description":{"text":""},"defaultValue":{"value":"0.6"}}]}},{"node":{"displayName":"IGNORE","docblock":"@description: TabController's TabBar component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js","description":{"text":"@description: TabController's TabBar component\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js"},"props":[{"name":"items","type":{"name":"arrayOf"},"description":{"text":"The list of tab bar items"},"defaultValue":null},{"name":"height","type":{"name":"number"},"description":{"text":"Tab Bar height"},"defaultValue":null},{"name":"enableShadow","type":{"name":"bool"},"description":{"text":"Show Tab Bar bottom shadow"},"defaultValue":null},{"name":"indicatorStyle","type":{"name":"custom"},"description":{"text":"custom style for the selected indicator"},"defaultValue":null},{"name":"labelStyle","type":{"name":"custom"},"description":{"text":"custom label style"},"defaultValue":null},{"name":"labelColor","type":{"name":"string"},"description":{"text":"the default label color"},"defaultValue":null},{"name":"selectedLabelColor","type":{"name":"string"},"description":{"text":"the selected label color"},"defaultValue":null},{"name":"uppercase","type":{"name":"bool"},"description":{"text":"whether to change the text to uppercase"},"defaultValue":null},{"name":"iconColor","type":{"name":"string"},"description":{"text":"icon tint color"},"defaultValue":null},{"name":"selectedIconColor","type":{"name":"string"},"description":{"text":"icon selected tint color"},"defaultValue":null},{"name":"activeBackgroundColor","type":{"name":"string"},"description":{"text":"TODO: rename to feedbackColor\nApply background color on press for TouchableOpacity"},"defaultValue":null},{"name":"containerWidth","type":{"name":"number"},"description":{"text":"The TabBar container width"},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"@description: A performant solution for a tab controller with lazy load mechanism\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n@notes: This component is based on react-native-gesture-handler\n@important: On Android, if using react-native-navigation, make sure to wrap your screen with gestureHandlerRootHOC\n@importantLink: https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation","description":{"text":"@description: A performant solution for a tab controller with lazy load mechanism\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n@notes: This component is based on react-native-gesture-handler\n@important: On Android, if using react-native-navigation, make sure to wrap your screen with gestureHandlerRootHOC\n@importantLink: https://kmagiera.github.io/react-native-gesture-handler/docs/getting-started.html#with-wix-react-native-navigation-https-githubcom-wix-react-native-navigation"},"props":[{"name":"selectedIndex","type":{"name":"number"},"description":{"text":"TODO: change to initial index\ncurrent selected tab index"},"defaultValue":{"value":"0"}},{"name":"onChangeIndex","type":{"name":"func"},"description":{"text":"callback for when index has change (will not be called on ignored items)"},"defaultValue":null},{"name":"asCarousel","type":{"name":"bool"},"description":{"text":"When using TabController.PageCarousel this should be turned on"},"defaultValue":null},{"name":"activeOpacity","type":null,"description":{"text":""},"defaultValue":{"value":"0.2"}}]}},{"node":{"displayName":"IGNORE","docblock":"@description: TabController's TabBarItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n@notes: Must be rendered as a direct child of TabController.TabBar.","description":{"text":"@description: TabController's TabBarItem\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/TabControllerScreen/index.js\n@notes: Must be rendered as a direct child of TabController.TabBar."},"props":[{"name":"label","type":{"name":"string"},"description":{"text":"label of the tab"},"defaultValue":null},{"name":"labelStyle","type":{"name":"custom"},"description":{"text":"custom label style"},"defaultValue":null},{"name":"labelColor","type":{"name":"string"},"description":{"text":"the default label color"},"defaultValue":null},{"name":"selectedLabelColor","type":{"name":"string"},"description":{"text":"the selected label color"},"defaultValue":null},{"name":"icon","type":{"name":"union"},"description":{"text":"icon of the tab"},"defaultValue":null},{"name":"iconColor","type":{"name":"string"},"description":{"text":"icon tint color"},"defaultValue":null},{"name":"selectedIconColor","type":{"name":"string"},"description":{"text":"icon selected tint color"},"defaultValue":null},{"name":"badge","type":{"name":"shape"},"description":{"text":"Badge component props to display next the item label"},"defaultValue":null},{"name":"width","type":{"name":"number"},"description":{"text":"A fixed width for the item"},"defaultValue":null},{"name":"ignore","type":{"name":"bool"},"description":{"text":"ignore of the tab"},"defaultValue":null},{"name":"onPress","type":{"name":"func"},"description":{"text":"callback for when pressing a tab"},"defaultValue":{"value":"_.noop"}},{"name":"uppercase","type":{"name":"bool"},"description":{"text":"whether to change the text to uppercase"},"defaultValue":null},{"name":"activeOpacity","type":{"name":"number"},"description":{"text":"The active opacity when pressing a tab"},"defaultValue":{"value":"1"}},{"name":"activeBackgroundColor","type":{"name":"string"},"description":{"text":"TODO: rename to feedbackColor\nApply background color on press for TouchableOpacity"},"defaultValue":null},{"name":"index","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"state","type":{"name":"object"},"description":{"text":""},"defaultValue":null},{"name":"currentPage","type":{"name":"object"},"description":{"text":""},"defaultValue":null},{"name":"onLayout","type":{"name":"func"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"WheelPicker","docblock":"","description":{"text":""},"props":[{"name":"selectedValue","type":{"name":"union"},"description":{"text":"the current selected value of the picker"},"defaultValue":null},{"name":"onValueChange","type":{"name":"func"},"description":{"text":"callback for when a value change"},"defaultValue":null},{"name":"style","type":{"name":"union"},"description":{"text":"pass custom style"},"defaultValue":null},{"name":"labelStyle","type":{"name":"union"},"description":{"text":"pass custom label style: fontSize, fontFamily, color<br>\nNote: label's color will override the text color (hex only)"},"defaultValue":{"value":"{fontSize: Typography.text70.fontSize, fontFamily: Typography.text70.fontFamily}"}},{"name":"itemHeight","type":{"name":"number"},"description":{"text":"The height of the selected item"},"defaultValue":null},{"name":"color","type":{"name":"string"},"description":{"text":"The color of the wheel picker (hex only)"},"defaultValue":{"value":"Colors.primary"}},{"name":"itemStyle","type":{"name":"union"},"description":{"text":"pass custom style for the picker item"},"defaultValue":null}]}},{"node":{"displayName":"WheelPicker.Item","docblock":"","description":{"text":""},"props":[{"name":"value","type":{"name":"union"},"description":{"text":"the picker item value"},"defaultValue":null},{"name":"label","type":{"name":"string"},"description":{"text":"the picker item display label"},"defaultValue":null}]}},{"node":{"displayName":"SafeAreaSpacerView","docblock":"","description":{"text":""},"props":[{"name":"style","type":{"name":"union"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"overlayColor","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"borderRadius","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"strokeColor","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"strokeWidth","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"visible","type":{"name":"bool"},"description":{"text":""},"defaultValue":null},{"name":"onRequestClose","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"highlightFrame","type":{"name":"shape"},"description":{"text":""},"defaultValue":null},{"name":"style","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"highlightViewTag","type":{"name":"number"},"description":{"text":""},"defaultValue":null},{"name":"children","type":{"name":"union"},"description":{"text":""},"defaultValue":null},{"name":"highlightViewTagParams","type":{"name":"shape"},"description":{"text":""},"defaultValue":null},{"name":"minimumRectSize","type":{"name":"shape"},"description":{"text":""},"defaultValue":null},{"name":"innerPadding","type":{"name":"number"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"initialProps","type":{"name":"object"},"description":{"text":""},"defaultValue":null},{"name":"component","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"onItemSelected","type":{"name":"func"},"description":{"text":""},"defaultValue":null}]}},{"node":{"displayName":"IGNORE","docblock":"","description":{"text":""},"props":[{"name":"inputRef","type":{"name":"object"},"description":{"text":"The reference to the actual text input (or the keyboard may not reset when instructed to, etc.)"},"defaultValue":null},{"name":"initialProps","type":{"name":"object"},"description":{"text":""},"defaultValue":null},{"name":"component","type":{"name":"string"},"description":{"text":""},"defaultValue":null},{"name":"onItemSelected","type":{"name":"func"},"description":{"text":""},"defaultValue":null},{"name":"useSafeArea","type":{"name":"bool"},"description":{"text":""},"defaultValue":{"value":"true"}}]}},{"node":{"displayName":"KeyboardTrackingView","docblock":"@description: A UI component that enables “keyboard tracking\" for this view and it's sub-views.\nWould typically be used when you have a TextField or TextInput inside this view.\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/KeyboardTrackingViewScreen.js\n@notes: This view is useful only for iOS.","description":{"text":"@description: A UI component that enables “keyboard tracking\" for this view and it's sub-views.\nWould typically be used when you have a TextField or TextInput inside this view.\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/KeyboardTrackingViewScreen.js\n@notes: This view is useful only for iOS."},"props":[{"name":"trackInteractive","type":{"name":"bool"},"description":{"text":"Enables tracking of the keyboard when it's dismissed interactively (false by default).\nWhy? When using an external keyboard (BT),\nyou still get the keyboard events and the view just hovers when you focus the input.\nAlso, if you're not using interactive style of dismissing the keyboard\n(or if you don't have an input inside this view) it doesn't make sense to track it anyway.\n(This is caused because of the usage of inputAccessory to be able to track the\nkeyboard interactive change and it introduces this bug)"},"defaultValue":null},{"name":"useSafeArea","type":{"name":"bool"},"description":{"text":"Allow control safe area"},"defaultValue":{"value":"true"}}]}},{"node":{"displayName":"KeyboardAwareInsetsView","docblock":"@description: Used to add an inset when a keyboard is used and might hide part of the screen.\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js\n@notes: This view is useful only for iOS.","description":{"text":"@description: Used to add an inset when a keyboard is used and might hide part of the screen.\n\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js\n@notes: This view is useful only for iOS."},"props":[]}},{"node":{"displayName":"KeyboardAccessoryView","docblock":"@description: View that allows replacing the default keyboard with other components\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/keyboardInput/KeyboardInputViewScreen.js","description":{"text":"@description: View that allows replacing the default keyboard with other components\n@example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/keyboardInput/KeyboardInputViewScreen.js"},"props":[{"name":"renderContent","type":{"name":"func"},"description":{"text":"Content to be rendered above the keyboard"},"defaultValue":null},{"name":"onHeightChanged","type":{"name":"func"},"description":{"text":"A callback for when the height is changed"},"defaultValue":null},{"name":"kbInputRef","type":{"name":"object"},"description":{"text":"iOS only.\nThe reference to the actual text input (or the keyboard may not reset when instructed to, etc.).\nThis is required."},"defaultValue":null},{"name":"kbComponent","type":{"name":"string"},"description":{"text":"The keyboard ID (the componentID sent to KeyboardRegistry)"},"defaultValue":null},{"name":"kbInitialProps","type":{"name":"object"},"description":{"text":"The props that will be sent to the KeyboardComponent"},"defaultValue":null},{"name":"onItemSelected","type":{"name":"func"},"description":{"text":"Callback that will be called when an item on the keyboard has been pressed."},"defaultValue":null},{"name":"onRequestShowKeyboard","type":{"name":"func"},"description":{"text":"Callback that will be called if KeyboardRegistry.requestShowKeyboard is called."},"defaultValue":null},{"name":"onKeyboardResigned","type":{"name":"func"},"description":{"text":"Callback that will be called once the keyboard has been closed"},"defaultValue":null},{"name":"iOSScrollBehavior","type":{"name":"number"},"description":{"text":"iOS only.\nThe scrolling behavior, use KeyboardAccessoryView.iosScrollBehaviors.X where X is:\nNONE, SCROLL_TO_BOTTOM_INVERTED_ONLY or FIXED_OFFSET\n\ndefault: FIXED_OFFSET"},"defaultValue":{"value":"-1"}},{"name":"revealKeyboardInteractive","type":{"name":"bool"},"description":{"text":"iOS only.\nShow the keyboard on a negative scroll\n\ndefault: false"},"defaultValue":{"value":"false"}},{"name":"manageScrollView","type":{"name":"bool"},"description":{"text":"iOS only.\nSet to false to turn off inset management and manage it yourself\n\ndefault: true"},"defaultValue":{"value":"true"}},{"name":"requiresSameParentToManageScrollView","type":{"name":"bool"},"description":{"text":"iOS only.\nSet to true manageScrollView is set to true and still does not work,\nit means that the ScrollView found is the wrong one and you'll have\nto have the KeyboardAccessoryView and the ScrollView as siblings\nand set this to true\n\ndefault: false"},"defaultValue":{"value":"false"}},{"name":"addBottomView","type":{"name":"bool"},"description":{"text":"iOS only.\nAdd a (white) SafeArea view beneath the KeyboardAccessoryView\n\ndefault: false"},"defaultValue":{"value":"false"}},{"name":"allowHitsOutsideBounds","type":{"name":"bool"},"description":{"text":"iOS only.\nAllow hitting sub-views that are placed beyond the view bounds\n\ndefault: false"},"defaultValue":{"value":"false"}},{"name":"useSafeArea","type":{"name":"bool"},"description":{"text":"iOS only.\nWhether or not to handle SafeArea\ndefault: true"},"defaultValue":null}]}}]}},"staticQueryHashes":["1243665866","3675868689"]}